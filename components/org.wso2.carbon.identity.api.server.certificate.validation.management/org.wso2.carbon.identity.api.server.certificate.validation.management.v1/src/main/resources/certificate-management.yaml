openapi: 3.0.0
info:
  version: "v1"
  title: 'WSO2 Identity Server - Certificate Validation Management API Definition'
  description: 'This document specifies a **RESTful API** for **WSO2 Identity Server Certificate Validation Management**'
  contact:
    name: WSO2
    url: 'http://wso2.com/products/identity-server/'
    email: iam-dev@wso2.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://localhost:9443/t/{tenant-domain}/api/server/v1'
    variables:
      tenant-domain:
        default: carbon.super
security:
  - OAuth2: []
  - BasicAuth: []

paths:
  /certificate-validation/revocation-validators:
    get:
      summary: Get all certificate validator configurations
      operationId: getCertificateRevocationValidators
      tags:
        - Certificate Revocation Validators
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validators'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
  /certificate-validation/revocation-validators/{validatorName}:
    get:
      summary: Get a specific certificate validator configurations
      operationId: getCertificateRevocationValidator
      tags:
        - Certificate Revocation Validators
      parameters:
        - name: validatorName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Validator details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Validator"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update the certificate validator configurations
      operationId: updateCertificateRevocationValidator
      tags:
        - Certificate Revocation Validators
      parameters:
        - name: validatorName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Validator"
      responses:
        "200":
          description: Validator updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Validator"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /certificate-validation/ca:
    get:
      summary: Get all ca certificates
      operationId: getCACertificates
      tags:
        - Certificate Authority Certificates
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificates'
    post:
      summary: Add a new ca certificate
      operationId: addCACertificate
      tags:
        - Certificate Authority Certificates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CACertificateAddRequest"
      responses:
        "201":
          description: Certificate added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CACertificate"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /certificate-validation/ca/{certificate-id}:
    get:
      summary: Get a ca certificate by certificate id
      operationId: getCACertificateById
      tags:
        - Certificate Authority Certificates
      parameters:
        - name: certificate-id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Certificate details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CACertificate"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a ca certificate by certificate id
      operationId: updateCACertificateById
      tags:
        - Certificate Authority Certificates
      parameters:
        - name: certificate-id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CACertificateUpdateRequest"
      responses:
        "200":
          description: Certificate updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CACertificate"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a ca certificate by id
      operationId: deleteCACertificateById
      tags:
        - Certificate Authority Certificates
      parameters:
        - name: certificate-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully Deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  parameters:
    filterQueryParam:
      in: query
      name: filter
      required: false
      description: >
        Condition to filter the retrieval of records.
        Only supports filtering based on the 'tag' and 'name' attribute.
        For local authenticators and request path authenticators, the 'displayName' is considered as the 'name' attribute during filtering.
        The 'name' attribute only supports 'eq' and 'sw operations. Filtering with multiple 'name' attributes is not supported.
        The 'tag' attribute only supports 'eq' operation. Filtering with multiple 'tag' attributes is supported with only 'or' as the complex query operation.
        E.g. /configs/authenticators?filter=name+sw+fi+and+(tag+eq+2FA+or+tag+eq+MFA)
      schema:
        type: string
    limitQueryParam:
      in: query
      name: limit
      description: >
        Maximum number of records to return. _<b>This option is not yet
        supported.<b>_
      schema:
        type: integer
        format: int32
        minimum: 0
    offsetQueryParam:
      in: query
      name: offset
      description: >
        Number of records to skip for pagination. _<b>This option is not yet
        supported.<b>_
      schema:
        type: integer
        format: int32
        minimum: 0
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: AUT-00000
          description: An error code.
        message:
          type: string
          example: Some Error Message
          description: An error message.
        description:
          type: string
          example: Some Error Description
          description: An error description.
        traceId:
          type: string
          example: e0fbcfeb-3617-43c4-8dd0-7b7d38e13047
          description: An error trace identifier.
    Validators:
      type: object
      properties:
        Validators:
          type: array
          items:
            type: string
    Validator:
      type: object
      properties:
        enable:
          type: boolean
        priority:
          type: integer
        fullChainValidation:
          type: boolean
        retryCount:
          type: integer
    CACertificates:
      type: object
      properties:
        Certificates:
          type: array
          items:
            $ref: '#/components/schemas/CACertificate'
    CACertificate:
      type: object
      properties:
        issuerDN:
          type: string
        crlUrls:
          type: array
          items:
            type: string
        ocspUrls:
          type: array
          items:
            type: string
        id:
          type: string
        serialNumber:
          type: string

    CACertificateAddRequest:
      type: object
      properties:
        certificate:
          type: string

    CACertificateUpdateRequest:
      type: object
      properties:
        certificate:
          type: string
  #-----------------------------------------------------
  # Descriptions of Authenticators API responses.
  #-----------------------------------------------------
  responses:
    BadRequest:
      description: Invalid input in the request.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Requested resource is not found.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentication information is missing or invalid.
    Forbidden:
      description: Access forbidden.
    ServerError:
      description: Internal server error.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    NotImplemented:
      description: Not Implemented.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
  #-----------------------------------------------------
  # Applicable authentication mechanisms.
  #-----------------------------------------------------
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://localhost:9443/oauth2/authorize'
          tokenUrl: 'https://localhost:9443/oauth2/token'
          scopes: {}
