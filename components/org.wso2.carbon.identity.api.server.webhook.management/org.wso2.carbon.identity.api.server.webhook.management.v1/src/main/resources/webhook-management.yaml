openapi: 3.0.0
info:
  version: "v1"
  title: 'WSO2 Identity Server - Webhook Management API Definition'
  description: 'This document specifies a **RESTful API** for **WSO2 Identity Server Webhook Subscription Management**'
  contact:
    name: WSO2
    url: 'http://wso2.com/products/identity-server/'
    email: iam-dev@wso2.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://localhost:9443/t/{tenant-domain}/api/server/v1'
    variables:
      tenant-domain:
        default: carbon.super
security:
  - OAuth2: []
  - BasicAuth: []

paths:
  /webhooks:
    get:
      summary: Retrieve all webhook subscriptions
      description: 'List all webhook subscriptions. \n\n <b>Scope(Permission) required:</b> `internal_webhook_view` \n\n'
      operationId: getWebhooks
      tags:
        - Webhook Subscriptions
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
      x-codeSamples:
        - lang: Curl
          source: |
            curl --location 'https://localhost:9443/t/carbon.super/api/server/v1/webhooks' \
            -H 'Accept: application/json' \
            -H 'Authorization: Basic YWRtaW46YWRtaW4='

    post:
      summary: Add a new webhook subscription
      description: 'Create a new webhook subscription. \n\n <b>Scope(Permission) required:</b> `internal_webhook_create` \n\n'
      operationId: createWebhook
      tags:
        - Webhook Subscriptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRequest"
      responses:
        '201':
          description: Webhook subscription created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
      x-codeSamples:
        - lang: Curl
          source: |
            curl --location --request POST 'https://localhost:9443/t/carbon.super/api/server/v1/webhooks' \
            -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
            -H 'Content-Type: application/json' \
            -d '{
                  "endpoint": "https://example.com/webhook",
                  "description": "Webhook to capture login related events",
                  "secret": "123e4567-e89b-12d3-a456-426614174000",
                  "event_schema": "WSO2",
                  "events_requested": [
                    "logins.loginSuccess",
                    "user-operations.updateUserGroup"
                  ],
                  "active": true
                }'

  /webhooks/{webhook-id}:
    get:
      summary: Retrieve a webhook subscription by ID
      description: 'Get a webhook subscription specified by webhook ID. \n\n <b>Scope(Permission) required:</b> `internal_webhook_view` \n\n'
      operationId: getWebhook
      tags:
        - Webhook Subscriptions
      parameters:
        - name: webhook-id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      x-codeSamples:
        - lang: Curl
          source: |
            curl --location 'https://localhost:9443/t/carbon.super/api/server/v1/webhooks/{webhook-id}' \
            -H 'Accept: application/json' \
            -H 'Authorization: Basic YWRtaW46YWRtaW4='

    put:
      summary: Update a webhook subscription
      description: 'Update a webhook subscription by webhook ID. \n\n <b>Scope(Permission) required:</b> `internal_webhook_update` \n\n'
      operationId: updateWebhook
      tags:
        - Webhook Subscriptions
      parameters:
        - name: webhook-id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRequest"
      responses:
        '200':
          description: Webhook updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
      x-codeSamples:
        - lang: Curl
          source: |
            curl --location --request PUT 'https://localhost:9443/t/carbon.super/api/server/v1/webhooks/{webhook-id}' \
            -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
            -H 'Content-Type: application/json' \
            -d '{
                  "endpoint": "https://example.com/webhook",
                  "description": "Webhook to capture login related events",
                  "secret": "123e4567-e89b-12d3-a456-426614174000",
                  "event_schema": "WSO2",
                  "events_requested": [
                    "logins.loginSuccess",
                    "user-operations.updateUserGroup"
                  ],
                  "active": true
                }'

    delete:
      summary: Delete a webhook subscription
      description: 'Delete a webhook subscription by webhook ID. \n\n <b>Scope(Permission) required:</b> `internal_webhook_delete` \n\n'
      operationId: deleteWebhook
      tags:
        - Webhook Subscriptions
      parameters:
        - name: webhook-id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successfully Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
      x-codeSamples:
        - lang: Curl
          source: |
            curl --location --request DELETE 'https://localhost:9443/t/carbon.super/api/server/v1/webhooks/{webhook-id}' \
            -H 'Authorization: Basic YWRtaW46YWRtaW4='

components:
  schemas:
    WebhookRequest:
      type: object
      required:
        - endpoint
        - secret
        - event_schema
        - events_requested
        - active
      properties:
        endpoint:
          type: string
          example: 'https://example.com/webhook'
        description:
          type: string
          example: 'Webhook to capture login related events'
        secret:
          type: string
          example: '123e4567-e89b-12d3-a456-426614174000'
        event_schema:
          type: string
          example: 'WSO2'
        events_requested:
          type: array
          items:
            type: string
          example: ['logins.loginSuccess', 'user-operations.updateUserGroup']
        active:
          type: boolean
          example: True

    WebhookResponse:
      allOf:
        - $ref: '#/components/schemas/WebhookRequest'
        - type: object
          properties:
            id:
              type: integer
              example: 1001
            iss:
              type: string
              example: 'https://api.asg.io/t/testasgardeo1'
            secret:
              type: string
              example: 'WEBHOOK:SECRET:93451'
            endpoint:
              type: string
              example: 'https://example.com/webhook'
            description:
              type: string
              example: 'Webhook to capture login related events'
            event_schema:
              type: string
              example: 'WSO2'
            events_requested:
              type: array
              items:
                type: string
              example: ['logins.loginSuccess', 'user-operations.updateUserGroup']
            events_supported:
              type: array
              items:
                type: string
              example: ['logins.loginSuccess', 'logins.loginFailed', 'registrations.addUser']
            events_delivered:
              type: array
              items:
                type: string
              example: ['logins.loginSuccess']
            active:
              type: boolean
              example: True
            createdAt:
              type: string
              format: date-time
              example: '2024-07-10T12:34:56Z'
            updatedAt:
              type: string
              format: date-time
              example: '2024-07-10T13:00:00Z'

    WebhookList:
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/WebhookResponse'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: WEBHOOK-00000
        message:
          type: string
          example: Some Error Message
        description:
          type: string
          example: Some Error Description
        traceId:
          type: string
          example: e0fbcfeb-3617-43c4-8dd0-7b7d38e13047

  responses:
    BadRequest:
      description: Invalid input in the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentication information is missing or invalid.
    Forbidden:
      description: Access forbidden.
    NotFound:
      description: Requested resource is not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Resource already exists.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotImplemented:
      description: Not Implemented.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://localhost:9443/oauth2/authorize'
          tokenUrl: 'https://localhost:9443/oauth2/token'
          scopes: {}
